### grep

--color=auto 或者 --color：表示对匹配到的文本着色显示

-i：在搜索的时候忽略大小写

-n：显示结果所在行号

-c：统计匹配到的行数，注意，是匹配到的总行数，不是匹配到的次数

-o：只显示符合条件的字符串，但是不整行显示，每个符合条件的字符串单独显示一行

-v：输出不带关键字的行（反向查询，反向匹配）

-w：匹配整个单词，如果是字符串中包含这个单词，则不作匹配

-Ax：在输出的时候包含结果所在行之后的指定行数，这里指之后的x行，A：after

-Bx：在输出的时候包含结果所在行之前的指定行数，这里指之前的x行，B：before

-Cx：在输出的时候包含结果所在行之前和之后的指定行数，这里指之前和之后的x行，C：context

-e：实现多个选项的匹配，逻辑or关系

-q：静默模式，不输出任何信息，当我们只关心有没有匹配到，却不关心匹配到什么内容时，我们可以使用此命令，然后，使用"echo $?"查看是否匹配到，0表示匹配到，1表示没有匹配到。

-P：表示使用兼容perl的正则引擎。

-E：使用扩展正则表达式，而不是基本正则表达式，在使用"-E"选项时，相当于使用egrep。
#####################################################################################

#

#### 总行数

grep -c "start" testtttt.txt 

"-o"选项即可只打印出匹配到的关机字
grep -i -o "123" testtttt.txt 

-n 行号 
grep -i -n -o "123" testtttt.txt 

#
"B"有before之意，示例如下：
grep -B1 "123" testtttt.txt     # 查出当前行的前一行

与"-B"选项对应的选项是"-A"选项，"-B"有Before之意，"-A"有After之意

"-C"选项可以理解为"-A与-B"的结合，：前后各一行
[root@zsd01 ~]# grep -C 1 -n "abc" testtttt.txt 

# 
精确匹配，就是"zsy"作为一个独立的单词存在  -w     "-w"有word之意，表示搜索的字符串作为一个独立的单词时才会被匹配到
grep -w "zsy" testtttt.txt  -n

#
反向查找  -v
grep -i -v "zsy" -n  testtttt.txt

# 
多个目标中匹配  -e
grep -e "test" -e "123" testtttt.txt -n


#
grep判断文本中是否存在某个字符串  -q

[root@zsd01 ~]# grep -q "tttttttttttttttttttttttt" testtttt.txt 
[root@zsd01 ~]# echo $?
1
#当使用"-q"选项时，表示grep使用静默模式，静默模式下grep不会输入任何信息，无论是否匹配到指定的字符串，都不会输出任何信息，所以，我们需要配合"echo $?"命令，查看命令的执行状态，如果返回值为0，证明上一条grep命令匹配到了指定的字符串，如果返回值为1，则证明上一条grep命令没有匹配到指定的字符串，就像上图示例中显示的那样，静默模式下，grep没有输出任何信息，当我们在testgrep文本中查找"test"字符串时，可以匹配到结果，当在文本中查找"ttttttttttttt"字符串的时候，没有匹配到结果，所以，我们只关心有没有匹配到指定字符时，可以使用"-q"选项，但是需要配合"echo $?"命令查看执行状态。









