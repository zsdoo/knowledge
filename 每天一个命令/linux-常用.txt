对拷文件夹 (包括文件夹本身)
scp -r   /home/helpteach/project/mallupload/ wasadmin@10.127.40.25:/home/test

对拷文件夹下所有文件 (不包括文件夹本身)
scp   /home/helpteach/project/mallupload/* wasadmin@10.127.40.25:/home/test

导入文件：
load data local infile '/root/data02/ENERGY_ACCOUNT_20200520_001.csv' into table energy_account_detail fields terminated by '|'lines terminated by '|\n';


数据库
连接名：biling_mysql
主机名或IP地址：localhost
端口：63306
用户名：root
密码：passw0rd


###  Linux——$1、$#、$@、$0、$1、$2

$1在shell中称为“位置参数”，表示传入的第1个参数（第1个入参）。
test -z $1 是一个判断表达式，用于判断$1的值是否为空字符串。
若为空，则结果为true；否则为false。
常用的shell中带有$符号的几个变量的含义：

区别：@ *

相同点：都是引用所有参数
不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数（分别存储在1 2 3）则"*" 等价于 “1 2 3"（传递了一个参数）；而“@" 等价于 "1" "2"  "$3"（传递了三个参数）
变量说明: 
$$ ——Shell本身的PID（ProcessID） 
$! ——Shell最后运行的后台Process的PID 
$? ——最后运行的命令的结束代码（返回值） 
$- ——使用Set命令设定的Flag一览 
$* ——所有参数列表。如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。 
$@ ——所有参数列表。如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。 
$# ——添加到Shell的参数个数 
$0 ——Shell本身的文件名 
$1～$n ——添加到Shell的各参数值。$1是第1参数、$2是第2参数…。 

转自：https://www.cnblogs.com/gaochsh/p/5610890.html


### date 参数（option）-d
date -d "2 days ago" +%Y%m%d

### 用法：date [选项]... [+格式]
　或：date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]
以给定的格式显示当前时间，或是设置系统日期。

  -d,--date=字符串              显示指定字符串所描述的时间，而非当前时间
  -f,--file=日期文件            类似--date，从日期文件中按行读入时间描述
  -r, --reference=文件          显示文件指定文件的最后修改时间
  -R, --rfc-2822                以RFC 2822格式输出日期和时间
                                例如：2006年8月7日，星期一 12:34:56 -0600
      --rfc-3339=TIMESPEC       以RFC 3339 格式输出日期和时间。
                                TIMESPEC=`date'，`seconds'，或 `ns`
                                表示日期和时间的显示精度。
                                日期和时间单元由单个的空格分开：
                                2006-08-07 12:34:56-06:00
  -s, --set=字符串              设置指定字符串来分开时间
  -u, --utc, --universal        输出或者设置协调的通用时间
      --help            显示此帮助信息并退出
      --version         显示版本信息并退出

给定的格式FORMAT 控制着输出，解释序列如下：

  %%    一个文字的 %
  %a    当前locale 的星期名缩写(例如： 日，代表星期日)
  %A    当前locale 的星期名全称 (如：星期日)
  %b    当前locale 的月名缩写 (如：一，代表一月)
  %B    当前locale 的月名全称 (如：一月)
  %c    当前locale 的日期和时间 (如：2005年3月3日 星期四 23:05:25)
  %C    世纪；比如 %Y，通常为省略当前年份的后两位数字(例如：20)
  %d    按月计的日期(例如：01)
  %D    按月计的日期；等于%m/%d/%y	
  %e    按月计的日期，添加空格，等于%_d
  %F    完整日期格式，等价于 %Y-%m-%d
  %g    ISO-8601 格式年份的最后两位 (参见%G)
  %G    ISO-8601 格式年份 (参见%V)，一般只和 %V 结合使用
  %h    等于%b
  %H    小时(00-23)
  %I    小时(00-12)
  %c    按年计的日期(001-366)
  %k    时(0-23)
  %l    时(1-12)
  %m    月份(01-12)
  %M    分(00-59)
  %n    换行
  %N    纳秒(000000000-999999999)
  %p    当前locale 下的"上午"或者"下午"，未知时输出为空
  %P    与%p 类似，但是输出小写字母
  %r    当前locale 下的 12 小时时钟时间 (如：11:11:04 下午)
  %R    24 小时时间的时和分，等价于 %H:%M
  %s    自UTC 时间 1970-01-01 00:00:00 以来所经过的秒数
  %S    秒(00-60)
  %t    输出制表符 Tab
  %T    时间，等于%H:%M:%S
  %u    星期，1 代表星期一
  %U    一年中的第几周，以周日为每星期第一天(00-53)
  %V    ISO-8601 格式规范下的一年中第几周，以周一为每星期第一天(01-53)
  %w    一星期中的第几日(0-6)，0 代表周一
  %W    一年中的第几周，以周一为每星期第一天(00-53)
  %x    当前locale 下的日期描述 (如：12/31/99)
  %X    当前locale 下的时间描述 (如：23:13:48)
  %y    年份最后两位数位 (00-99)
  %Y    年份
  %z +hhmm              数字时区(例如，-0400)
  %:z +hh:mm            数字时区(例如，-04:00)
  %::z +hh:mm:ss        数字时区(例如，-04:00:00)
  %:::z                 数字时区带有必要的精度 (例如，-04，+05:30)
  %Z                    按字母表排序的时区缩写 (例如，EDT)

默认情况下，日期的数字区域以0 填充。
以下可选标记可以跟在"%"后:

  - (连字符)不填充该域
  _ (下划线)以空格填充
  0 (数字0)以0 填充
  ^ 如果可能，使用大写字母
  # 如果可能，使用相反的大小写

在任何标记之后还允许一个可选的域宽度指定，它是一个十进制数字。
作为一个可选的修饰声明，它可以是E，在可能的情况下使用本地环境关联的
表示方式；或者是O，在可能的情况下使用本地环境关联的数字符号。

时间输出
date是Linux系统里自带的一个系统命令，用来显示当前的系统时间，不过默认显示的结果里包括很多信息，特别是做为文件名输出时，不是很方便
好在date命令里包含格式化输出的选项
————————————————
版权声明：本文为CSDN博主「siaisjack」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/jk110333/article/details/8590746

### linux 下shell中if的“-e，-d，-f”
https://www.jianshu.com/p/9bca2509e565

文件表达式
-e filename 如果 filename存在，则为真
-d filename 如果 filename为目录，则为真 
-f filename 如果 filename为常规文件，则为真
-L filename 如果 filename为符号链接，则为真
-r filename 如果 filename可读，则为真 
-w filename 如果 filename可写，则为真 
-x filename 如果 filename可执行，则为真
-s filename 如果文件长度不为0，则为真
-h filename 如果文件是软链接，则为真
filename1 -nt filename2 如果 filename1比 filename2新，则为真。
filename1 -ot filename2 如果 filename1比 filename2旧，则为真。

整数变量表达式
-eq 等于
-ne 不等于
-gt 大于
-ge 大于等于
-lt 小于
-le 小于等于

字符串变量表达式
If  [ $a = $b ]                 如果string1等于string2，则为真
                                字符串允许使用赋值号做等号
if  [ $string1 !=  $string2 ]   如果string1不等于string2，则为真       
if  [ -n $string  ]             如果string 非空(非0），返回0(true)  
if  [ -z $string  ]             如果string 为空，则为真
if  [ $sting ]                  如果string 非空，返回0 (和-n类似) 

    逻辑非 !                   条件表达式的相反
if [ ! 表达式 ]
if [ ! -d $num ]               如果不存在目录$num

    逻辑与 –a                   条件表达式的并列
if [ 表达式1  –a  表达式2 ]

    逻辑或 -o                   条件表达式的或
if [ 表达式1  –o 表达式2 ]


###  lftp   http://www.ezencart.com/pages/743.html
lftp 是一个功能强大的下载工具，它支持访问文件的协议: ftp, ftps, http, https, hftp, fish.(其中ftps和https需要在编译的时候包含openssl库)。llftp的界面非常想一个shell: 有命令补全，历史记录，允许多个后台任务执行等功能，使用起来非常方便。它还有书签、排队、镜像、断点续传、多进程下载等功能。

1.常见登录到对方服务器方法

1#登录到ftp--法1
   lftp (ftp://)user:password@site:21  #ftp://可以省略，默认21端口可以省略
2#登录到ftp--法2
   lftp (ftp://)user@site:port   #这种方式回车后，系统提示输入密码
3#登录到sftp---法1
   lftp sftp://user:password@site:22  #如果是默认端口22，可以省略，如果不是就必须填写端口号
4#登录到sftp---法2
   lftp sftp://user@password:port
当然lftp的登录方式还有很多种记录常用的即可

2.lftp常用option，lftp [OPTS]

1-f #执行文件中的命令后退出
2-c #执行命令后退出
3--help #显示帮助信息后退出
4--version #显示 lftp 版本后退出
5#其他的选项同 'open' 命令
6-e #在选择后执行命令
7-u [,]  #使用指定的用户名/口令进行验证
8-p  #连接指定的端口

3.登录后常用命令

1cd #切换远端目录， lcd 切换本地目录
2ls  #显示远端文件列表  !ls 显示本地文件列表
3get #下载远端文件  mget 下载远端文件可以用通配符也就是 *，pget 使用多个线程来下载远端文件, 预设为五个。
4mirror  #下载/上传(mirror -R)/同步 整个目录。
5put  #上传文件 ，mput 上传多个文件(支持通配符)
6mv  #移动远端文件(远端文件改名)
7rm  #删除远端文件， mrm 删除多个远端文件(支持通配符)
8mkdir #建立远端目录 ，rmdir删除远端目录
9pwd  #显示目前远端所在目录，lpwd 显示本地目录
10du  #计算远端目录的大小
11!   #执行本地 shell的命令，如!date
12alias  #定义别名
13bookmark  #设定书签
14exit  #退出ftp
注：ftp中的bookmark命令，是将配置写到~/.lftp/bookmarks文件中；我们可以直接修改此文件，快速登陆ftp服务器。

3.小技巧

lftp中文乱码问题

1set ftp:charset gbk #(或者 gb2312 或 utf-8) 设置ftp端的编码格式  set -a 查看所有可以设置的命令
设置被动/非被动模式

1set ftp:passive-mode 1 ## 1 被动 0主动

查找ftp端文件

1ls *.txt ##查找当前目录下的所有txt文件
2ls ./123/ ##列出123目录下所有文件
3find . -name "*.txt"   ##递归查找站点上所有的txt文件
4find ./xx -name "*.txt" ##查找xx目录下所有的txt文件

ls第二次读取的是本地缓存,可以用 rels 代替 ls 或者catch off / catch on 来开关catch,catch flush清空本地catch

多任务处理

1ctrl+z ##将当前进行的任务移交后台处理，也可以在命令行末尾加&符号使任务在后台执行
2wait   ##将后台处理任务调至前台查看
3jobs   ##查看后台进行的任务列表
4kill all 或者 job_no ##删除所有任务 或 指定的任务
5 
6queue start ##开始任务列表
7queue stop ##停止任务列表
8 
9##将任务加入任务列表
10queue get 123.txt
11queue put 234.txt
12queue mirror aaa/

定义别名

1alias  #查看所有定义的别名
2alias less more #定义别名 将less定义为more的功能
3alias less  #后面直接跟别名，取消别名

bookmark 书签

1bookmark add [name]  #增加名称为 name 的书签
2bookmark del [name]   #删除名称为 name 的书签
3bookmark list  #显示目前有设定那些书签（或直接输入bookmark）
4bookmark edit #编辑器修改书签 (~/.lftp/bookmarks)
5open [name]  #链接书签

常用实例

1get -c a.zip # -c 断点续传
2mget *.txt   #下载所有远程当前目录的txt文档
3mirror --parallel=3 incoming  #--parallel 多线程， 下载整个incoming目录
4mirror -R local_name  #上传本地local_name目录
5pget -n 6 a.zip   #多线程，默认5线程
6lftp -c "pget -n 10 http://www.baidu.com/img/baidu_jgylogo3.gif"  #多线程 断点续传 http资源

增量备份
以前的博文中就讲到过的，在拿出来

1lftp -u [username],[password] -e "mirror -R --delete --only-newer --verbose 本地目录 远程目录" [ftpsite]
2# -e 告诉lftp执行连接服务器后接着运行指定命令
3# mirror -R 上传目录
4# --delete：删除远程备份服务器中存在的文件而本地服务器不存在的文件
5#--only-newer ：lftp只上传新的文件
6#--verbose：监视同步的进程

当如如果要恢复的话
1 lftp -u username,password -e "mirror --delete --only-newer --verbose 远程目录 本地目录" ftpsite
参考资料：http://hi.baidu.com/heqk/blog/item/560aac51766adc948d5430a4.html


###linux命令 EOF
在shell脚本中，通常将EOF与 << 结合使用，表示后续的输入作为子命令或子Shell的输入，直到遇到EOF为止，再返回到主Shell。

EOF只是一个分界符，当然也可以用abcde替换。
当shell遇到<<时，它知道下一个词是一个分界符。在该分界符以后的内容都被当作输入，直到shell又看到该分界符(位于单独的一行)。
此分界符可以是所定义的任何字符串，其实，不一定要用EOF，只要是“内容段”中没有出现的字符串，都可以用来替代EOF，完全可以换成abcde之类的字符串，只是一个起始和结束的标志罢了。

1，command<<EOF
（内容）
EOF
例如：
 

代码示例:
#!/bin/bash
#Filename：do.sh
su - oracle -c "
export ORACLE_SID=orcl
sqlplus /nolog <<EOF
connect / as sysdba
startup;
exit;
EOF"
sleep 5
su - oracle -c 
lsnrctl start
说明：
将“内容段”整个作为命令的输入。
用su命令读取整段命令，并逐行执行。

 

2，特殊用法：
: << COMMENTBLOCK
   shell脚本代码段
COMMENTBLOCK
用来注释整段脚本代码。 : 是shell中的空语句。
 

echo start
:<<COMMENTBLOCK
echo
echo "this is a test"
echo
COMMENTBLOCK
echo end
这段脚本执行时，中间部分不会被执行：
 

代码示例:
[root@newserver shell]# sh eof.sh
start
end


### sed命令

概述
sed命令是一个面向字符流的非交互式编辑器，也就是说sed不允许用户与它进行交互操作。sed是按行来处理文本内容的。在shell中，使用sed来批量修改文本内容是非常方便的。

sed命令的选项
sed [选项] [动作]

选项与参数：
-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。
-e ：直接在命令列模式上进行 sed 的动作编辑；
-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；
-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)
-i ：直接修改读取的文件内容，而不是输出到终端。

function：
a ：新增行， a 的后面可以是字串，而这些字串会在新的一行出现(目前的下一行)
c ：取代行， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行
d ：删除行，因为是删除，所以 d 后面通常不接任何参数，直接删除地址表示的行；
i ：插入行， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；
p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行
s ：替换，可以直接进行替换的工作,通常这个 s 的动作可以搭配正规表示法，例如 1,20s/old/new/g 一般是替换符合条件的字符串而不是整行

一般function的前面会有一个地址的限制，例如 [地址]function，表示我们的动作要操作的行。下面我们通过具体的例子直观的看看sed的使用方法。

删除行
//test.txt 内容如下
11 aa
22 bb
33 cc
23 dd
55 2e

sed '1,2d' test.xx 

输出：
33 cc
23 dd
55 2e

其中1,2d中的d表示删除，而d前面的表示删除的行的地址，而1,2表示一个地址范围，也就是删除第1行和第2行。地址范围的表示一般是  m,n 表示对m和n行之间的所有行进行操作，也包含第m行和第n行。sed的地址寻址中可以使用$表示最后一行，例如 m,$ 表示对m行以及其后面的所有行进行操作，包括最后一样。m,$d就是删除m行以及其后面的所有行内容。当然我们还可以对某一行进行操作，例如2d表示仅仅删除第2行。除了使用数字范围 m,n 表示多行区间，以及m表示单行以外，我们还可以使用正则表达式选出符合条件的行，并对这些行进行操作，同样的是上面的文件：

sed '/2/d' test.txt

输出：
11 aa
33 cc

上面的命令中　/2/ 是一个正则表达式，在sed中正则表达式是写在 /.../ 两个斜杠中间的，这个正则的意思是寻找所有包含2的行，执行相应的操作，也就是删除所有包含2的行，如果我们只想删除以2开头的行呢，只需要修改一下正则表达式就可以了：

sed '/^2/d' test.txt

输出：
11 aa
33 cc
55 2e

新增行
sed '1a hello world' test.txt

输出：
11 aa
hello world
22 bb
33 cc
23 dd
55 2e

其中a命令表示在指定行的后面附加一行，1a则是在第一行的后面添加一行，添加的内容就是a后面的内容，如果a的前面没有地址限定则在所有行的后面都会添加指定的字符串

sed '1i hello world' test.txt

输出：
hello world
11 aa
22 bb
33 cc
23 dd
55 2e

命令i表示在指定的行的前面插入一行，插入的内容为其后面的字符串

替换行
sed '1c hello world' test.txt

输出：
hello world
22 bb
33 cc
23 dd
55 2e

命令c会替换指定的行的所有内容，替换成其后面的字符串，所有的新增，删除，替换行，这些命令前面的地址修饰都可以指定地址空间，也都可以使用正则表达式，命令会应用在选出的符合地址条件的所有行上面，例如：

sed '/^2/c hello world' test.txt

输出：
11 aa
hello world
33 cc
hello world
55 2e

替换以2开头的行，其内容是c命令后面的字符串

替换部分字符串而不是整行
sed中除了上面的命令是针对整行进行操作的之外，还提供一个替换命令，该命令对某一行中的部分字符串进行操作，下面举一个简单的例子，还是同样的文本内容，执行下面的命令：

sed 's/aa/AA/' test.txt

输出：
11 AA
22 bb
33 cc
23 dd
55 2e

我们这里说的就是s命令，执行的结果是我们文件中的 aa 被替换成 AA ，我们看一下s命令后面接的是3个斜杠分隔的两串字符串，其含义是  s/待替换的字符串/新字符串/ 也就是说使用后面的 AA 替换文件中出现的前面的 aa 。实际上这里的替换仅仅替换每一行遇到的第一个aa，我们修改一下文件的内容：

//test.txt
11 aa
22 bb
33 cc
23 dd
55 2e
66 aaff ccaa
zz ggaa

sed 's/aa/AA/' test.txt

输出：
11 AA
22 bb
33 cc
23 dd
55 2e
66 AAff ccaa
zz ggAA

可以看到第6行的ccaa中的aa是没有被替换的，也就是说此时仅仅替换了每一行搜索到的第一个aa字符串进行操作，那么如果要对一行里面的所有的符合条件的字符串都做替换操作呢，我们可以使用参数g，例如修改命令如下：

sed 's/aa/AA/g' test.txt

输出：
11 AA
22 bb
33 cc
23 dd
55 2e
66 AAff ccAA
zz ggAA

在最后一个斜杠后面加上g选项之后，表示进行全局替换，也就是说一行中所有符合条件的旧字符串都会被替换成新字符串，而不仅仅是第一个。与其他针对行的操作一样，s命令也可以进行地址选择，其地址使用方法与我们之前的一样，也就是在s的前面加上地址空间限定，例如：

sed '1s/aa/AA/g' test.txt

输出：
11 AA
22 bb
33 cc
23 dd
55 2e
66 aaff ccaa
zz ggaa

可以看到仅仅对第一行进行了替换操作，其他的地址限定方法同样也是可以使用的，我们可以使用m,n的限定，例如：

sed '5,$s/aa/AA/g' test.txt

输出：
11 aa
22 bb
33 cc
23 dd
55 2e
66 AAff ccAA
zz ggAA

表示对第5行直到文件末尾的所有行进行搜索替换操作，同样s命令的地址限定也支持使用正则表达式限定符合条件的行，然后在这些行中进行字符串的搜索替换操作，例如：

sed '/^[0-9]/s/aa/AA/g' test.txt

输出：
11 AA
22 bb
33 cc
23 dd
55 2e
66 AAff ccAA
zz ggaa

我们在s命令前面添加了 /^[0-9]/ 这个修饰，该正则表达式表示对所有以数字开头的行，执行s操作

另外一个要说明的是  s/待替换的字符串/新字符串/ 这种格式中 / 作为分隔符并不是一定的，当使用s命令时候，我们可以使用别的分隔符，实际上s后面紧接着的字符就是分隔符，所以不一定是 / 符号。例如：

echo 'aabbccaadd' | sed s#aa#AA#g

输出：
AAbbccAAdd

这里s命令后面跟着的#符号被当作分隔符了

搜索并输出行内容
sed还提供一个p命令用于搜索符合条件的行，并输出该行的内容，而不做其他的任何修改，例如：

//test.txt
11 aa
22 bb
33 cc
23 dd

sed '2p' test.txt

输出：
11 aa
22 bb
22 bb
33 cc
23 dd

可以看到第二行被输出来了，但是sed好像将文件的所有内容输出了一遍，而第2行则多输出了一次，实际上sed默认情况下是会将所有标准输入的数据又重新输出到标准输出的，我们可以加上 -n 选项让sed仅仅是输出经过处理之后的那些行，而不是输出之前从标准输入中获取到的所有行内容，例如：

sed -n '2p' test.txt

输出：
22 bb

这样仅仅会输出p命令的处理结果了，-n 选项一般是与p命令联合使用的，其他的增加，删除，替换行的命令是不需要 -n 选项的

将修改应用到文件中
我们之前做的所有实验，实际上都没有修改test.txt文件的内容，也就是说我们看到的修改结果仅仅输出到控制台上，而文件test.txt的内容是没有修改的，我们可以使用 -i 选项告诉sed直接修改文件的内容，而不是将修改结果输出到终端上，例如：

sed -i '2d' test.txt 

命令运行之后，我们发现test.txt的第2行没有了

sed正则中的元字符
我们知道sed中的命令前面可以使用地址范围进行限制，表示对文件的某些符合条件的行执行相应的操作，其中我们可以使用正则表达式选出要操作的行，而sed中正则的语法可能与我们其他命令的正则语法有一些不同，这里我们有必要列出sed中常用的正则元字符：

$ 表示行尾 
^ 表示行首
[a-z0-9]表示字符范围
[^]表示除了字符集中的字符以外的字符 

sed的正则中  \(\)  和 \{m,n\} 需要转义 
. 表示任意字符  
* 表示零个或者多个  
\+ 一次或多次　　
\? 零次或一次    
\| 表示或语法

### iconv()  更改文件编码方式

linux shell 配置文件中默认的字符集编码为UTF－8 。UTF－8是unicode的一种表达方式，gb2312是和unicode都是字符的编码方式，所以说gb2312跟utf－8的概念应该不是一个层次上的。在LINUX上进行编码转换时,可以利用iconv命令实现,这是针对文件的,即将指定文件从一种编码转换为另一种编码。
       查了下iconv命令用法如下：
iconv [选项...] [文件...]

有如下选项可用:

输入/输出格式规范：
-f, --from-code=名称 原始文本编码
-t, --to-code=名称 输出编码

信息：
-l, --list 列举所有已知的字符集

输出控制：
-c 从输出中忽略无效的字符
-o, --output=FILE 输出文件
-s, --silent 关闭警告
--verbose 打印进度信息

所以，我在程序的末尾直接加了一句
iconv -f utf-8 -t gb2312 /server_test/reports/software_.txt > /server_test/reports/software_asserts.txt
解决了问题。


iconv命令实现文件编码转换
Linux系统中的iconv命令可以实现一个文件的整体编码转换，详细帮助可以通过man iconv查看。iconv命令的基本格式为：

iconv -f from-encoding -t to-encoding  input-file -o output-file

### convmv  更改文件名编码方式

自从转到ubuntu平台之后，原来在SUSE下面留下来的一大批mp3的文件名一直显示乱码，今天在网上搜索到在linux下面两个工具convmv和iconv。

convmv就是更改文件名编码方式的一个工具。比如

sudo convmv -f gbk -t utf-8 -r –notest /home

就是将/home目录下原来文件名是gbk编码方式的全部改为utf-8格式的。这里 -f 后面为原来的编码方式，-t 后面是要更改为的编码方式， -r 表示这个目录下面的所有文件， –notest 表示马上执行，而不是仅仅测试而已。另外这命令好像要root才能执行，因此要加上 sudo。

iconv是更改文件编码方式的一个工具：

sudo iconv -f gbk -t utf-8 -o outfile infile

-f为原来的编码方式，-t 为输出文件的编码方式， -o表示输出文件名，这利用outfile表示，最后跟上要更改编码方式的文件名sourcefile 。

通过这两个工具，中文文件乱码的问题终于解决。
————————————————
版权声明：本文为CSDN博主「fengtao1982」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fengtao1982/article/details/84285547



### unzip命令
unzip(选项)(参数)
-c：将解压缩的结果显示到屏幕上，并对字符做适当的转换；
-f：更新现有的文件；
-l：显示压缩文件内所包含的文件；
-p：与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换；
-t：检查压缩文件是否正确；
-u：与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中的其他文件解压缩到目录中；
-v：执行时显示详细的信息；
-z：仅显示压缩文件的备注文字；
-a：对文本文件进行必要的字符转换；
-b：不要对文本文件进行字符转换；
-C：压缩文件中的文件名称区分大小写；
-j：不处理压缩文件中原有的目录路径；
-L：将压缩文件中的全部文件名改为小写；
-M：将输出结果送到more程序处理；
-n：解压缩时不要覆盖原有的文件；
-o：不必先询问用户，unzip执行后覆盖原有的文件；
-P<密码>：使用zip的密码选项；
-q：执行时不显示任何信息；
-s：将文件名中的空白字符转换为底线字符；
-V：保留VMS的文件版本信息；
-X：解压缩时同时回存文件原来的UID/GID；
-d<目录>：指定文件解压缩后所要存储的目录；
-x<文件>：指定不要处理.zip压缩文件中的哪些文件；
-Z：unzip-Z等于执行zipinfo指令。
参数
压缩包：指定要解压的“.zip”压缩包。

实例
将压缩文件text.zip在当前目录下解压缩。
unzip test.zip

将压缩文件text.zip在指定目录/tmp下解压缩，如果已有相同的文件存在，要求unzip命令不覆盖原先的文件。
unzip -n test.zip -d /tmp

查看压缩文件目录，但不解压。
unzip -v test.zip

将压缩文件test.zip在指定目录/tmp下解压缩，如果已有相同的文件存在，要求unzip命令覆盖原先的文件。
unzip -o test.zip -d tmp/

网上很多人说用jar包解压，但jar命令解压时不能指定目录，推荐使用unzip解压war包。

unzip -d 指定目录
[root@oracle upload]# unzip -oq common.war -d common
 
### unzip命令名：
功 能说明：解压缩zip文 件
语　　法：unzip [-cflptuvz][-agCjLMnoqsVX][-P <密 码>][.zip文 件][文件][-d <目录>][-x <文件>] 或 unzip [-Z]
补充说明：unzip为.zip压缩文件的解压缩程序。
参　　数：
-c   将 解压缩的结果显示到屏幕上，并对字符做适当的转换。
-f   更 新现有的文件。
-l   显 示压缩文件内所包含的文件。
-p   与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任 何的转换。
-t   检 查压缩文件是否正确。，但不解压。
-u   与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中 的其他文件解压缩到目录中。
-v   执 行是时显示详细的信息。或查看压缩文件目录，但不解压。
-z   仅 显示压缩文件的备注文字。
-a   对 文本文件进行必要的字符转换。
-b   不 要对文本文件进行字符转换。
-C   压 缩文件中的文件名称区分大小写。
-j   不 处理压缩文件中原有的目录路径。
-L   将 压缩文件中的全部文件名改为小写。
-M   将 输出结果送到more程 序处理。
-n   解 压缩时不要覆盖原有的文件。
-o   不 必先询问用户，unzip执 行后覆盖原有文件。
-P<密码>   使 用zip的密码选项。
-q   执 行时不显示任何信息。
-s   将 文件名中的空白字符转换为底线字符。
-V   保 留VMS的文件版本信 息。
-X   解 压缩时同时回存文件原来的UID/GID。
[.zip文件]   指定.zip压缩文件。
[文件]   指定 要处理.zip压缩文 件中的哪些文件。
-d<目录>   指 定文件解压缩后所要存储的目录。
-x<文件>   指 定不要处理.zip压 缩文件中的哪些文件。
-Z   unzip -Z等 于执行zipinfo指 令。
 
### zip命令名：
 
功能说明：压缩文件。
语　　法：zip [-AcdDfFghjJKlLmoqrSTuvVwXyz$][-b <工 作目录>][-ll][-n <字 尾字符串>][-t <日 期时间>][-<压 缩效率>][压 缩文件][文件...][-i <范本样式>][-x <范本样式>]
补充说明：zip是个使用广泛的压缩程序，文件经它压缩后会另外产生具 有".zip"扩展名 的压缩文件。
参　　数：
-A   调 整可执行的自动解压缩文件。
-b<工作目录>   指 定暂时存放文件的目录。
-c   替 每个被压缩的文件加上注释。
-d   从 压缩文件内删除指定的文件。
-D   压 缩文件内不建立目录名称。
-f   此 参数的效果和指定"-u"参 数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中。
-F   尝 试修复已损坏的压缩文件。
-g   将 文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件。
-h   在 线帮助。
-i<范本样式>   只 压缩符合条件的文件。
-j   只 保存文件名称及其内容，而不存放任何目录名称。
-J   删 除压缩文件前面不必要的数据。
-k   使 用MS-DOS兼容格 式的文件名称。
-l   压 缩文件时，把LF字符 置换成LF+CR字 符。
-ll   压 缩文件时，把LF+CR字 符置换成LF字符。
-L   显 示版权信息。
-m   将 文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。
-n<字尾字符串>   不 压缩具有特定字尾字符串的文件。
-o   以 压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同。
-q   不显 示指令执行过程。
-r   递 归处理，将指定目录下的所有文件和子目录一并处理。
-S   包 含系统和隐藏文件。
-t<日期时间>   把 压缩文件的日期设成指定的日期。
-T   检 查备份文件内的每个文件是否正确无误。
-u   更 换较新的文件到压缩文件内。
-v   显 示指令执行过程或显示版本信息。
-V   保 存VMS操作系统的文 件属性。
-w   在 文件名称里假如版本编号，本参数仅在VMS操 作系统下有效。
-x<范本样式>   压 缩时排除符合条件的文件。
-X   不 保存额外的文件属性。
-y   直 接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之 类的系统下有效。
-z   替 压缩文件加上注释。
-$   保 存第一个被压缩文件所在磁盘的卷册名称。
-<压缩效率>   压 缩效率是一个介于1-9的 数值。
 
例.   将当前目录下的所有文件和文件夹全部压缩成test.zip文件,-r表示递归压缩子目录下所有文件
[root@mysql test]# zip -r test.zip .
 
### jar命令
压缩war包：
把当前目录下的所有文件打包成game.war
jar -cvfM0 game.war ./
-c   创建war包
-v   显示过程信息
-f    指定归档文件名
-M  不创建条目的清单文件
-0   这个是阿拉伯数字，只打包不压缩的意思
解压war包
jar -xvf game.war
解压到当前目录


### head
功能：显示文件的开头至标准输出中（默认文件开头的前10行）
head命令与tail命令用法相似，head命令用于查看文档的开始指定数量的字符块，默认显示文档的前 10 行，如果给定的文件不止一个，则在显示的每个文件前面加一个文件名标题。

1、用法

head [选项] [文件..]

2、命令选项

-c, --bytes=[-]K 　　k,显示文档开始的前k个字节，-k,不显示文档结尾的最后 k 个字节
-n, --lines=[-]K 　　 k,显示文档开始的前k行，-k,不显示文档结尾的最后 k 行
-q, --quiet, --silent    不显示包含给定文件名的文件头
-v, --verbose	　　  	总是显示包含给定文件名的文件头
--help	　　　　　  显示此帮助信息并退出
--version	　　 　　显示版本信息并退出


###  tail 命令

tail 命令可用于查看文件的内容，有一个常用的参数 -f 常用于查阅正在改变的日志文件。

tail -f filename 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。

参数：

-f 循环读取
-q 不显示处理信息
-v 显示详细的处理信息
-c<数目> 显示的字节数
-n<行数> 显示文件的尾部 n 行内容
--pid=PID 与-f合用,表示在进程ID,PID死掉之后结束
-q, --quiet, --silent 从不输出给出文件名的首部
-s, --sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒

tail -n 100 /etc/cron  #显示最后100行数据
tail -n -100 /etc/cron #除了前99行不显示外，显示第100行到末尾行


###   grep

grep的全称是global regular expression print，是linux中最强大的文本搜索命令之一，常用于搜索文本文件中是否含有某些特定模式的字符串。该命令以行为单位读取文本并使用正则表达式进行匹配，匹配成功后打印出该行文本。

grep选项与参数：
-a：将binary档案以text档案的方式搜寻数据
-c：计算找到’搜寻字符串’的次数
-i：忽略大小写
-n：顺便输出行号
-v：反向选择，亦即显示出没有’搜寻字符串’内容的那一行
--color=auto：可以将找到的关键字部分加上颜色显示。color有三种参数(auto，always，never)
如果加上--color=never可以去掉颜色
[zhang@localhost ~]$ cat 1.txt 
hello world
abcdefg hijklmn
opqrst uvwxyz
abc
hello
world
HEllo1
hello2
world3
[zhang@localhost ~]$ cat 1.txt | grep hello
hello world
hello
hello2
搜索到的hello字段，默认红色，如果加上--color=never可以去掉颜色。
添加-n参数，可以输出行号。
[zhang@localhost ~]$ cat 1.txt | grep hello -n
1:hello world
5:hello
21:hello2
添加-i参数，忽略大小写。
[zhang@localhost ~]$ cat 1.txt | grep hello -i
hello world
hello
HEllo1
hello2
|连续使用
[zhang@localhost ~]$ cat 1.txt | grep o | grep w
hello world
opqrst uvwxyz
world
world3


【命令格式】

grep [option] "string_to_find" filename

常见选项：

（1）-i：忽略搜索字符串的大小写

（2）-v：取反，即输出不匹配的那些文本行

（3）-n：输出行号

（4）-l：输出能够匹配模式的文件名，相反的选项为-L

（5）-q：静默输出

选项是可选的，根据实际需求进行选择即可

string_to_find为需要匹配的模式，可以填写字符串或者正则表达式

filename为需要查找的文件的名称

【常见用法】

1.统计文件中能够匹配的行数

涉及选项：

（1）-c：计算匹配成功的行数

例子：

（1）输出text.txt中含有hello字符串的行的数量：


grep -c "hello" text.txt


2.统计文件中匹配的数量

涉及选项：

（1）-o：只输出匹配到的文本部分

例子：

（1）输出text.txt中含有hello的数量：


grep -o "hello" text.txt | wc -l
注意这个例子和上个的区别，-c选项在遇到一行中多次匹配正则表达式的情况时只是认为这一行匹配成功，而不会计算匹配成功的次数

3.递归搜索

涉及选项：

（1）-r：grep的参数filename为目录时可以加上本选项表示递归搜索

例子：

（1）从test_dir开始递归查找含有hello的行：

grep -r "hello" test_dir
这个选项很适用于在工程中搜索某些特定字符串

4.匹配多个正则表达式

涉及选项：

（1）-e：该选项加上正则表达式就是一个需要匹配的模式

例子：

（1）找出匹配hello或者world的行：


grep -e "hello" -e "world" test.txt


5.指定/排除文件

涉及选项：

（1）--include：指定需要搜索的文件

（2）--exclude：排除需要搜索的文件

（3）--exclude-dir：排除需要搜索的目录

例子：

（1）搜索src目录中.c和.cpp文件中的含有main的行：


grep -r "main" ./src --include *.{c,cpp}
（2）搜索src目录中含有main的行，但不搜索readme文件：


grep -r "main" ./src --exclude "readme"
（3）搜索src目录中含有main的行，但不搜索.git文件夹：


grep -r "main" ./src --exclude-dir ".git"


6.零值字节

涉及选项：

（1）-Z：设定输出的文本之间以'\0'作为分隔符

例子：

（1）删除含有hello字符串的文件：

grep -r "hello" ./src -lZ | xargs -0 rm -f
注意如果不使用-Z选项，则输出的文件名之间以空格符分隔。那么如果有个文件的文件名本身就是包含空格的，则该文件会被认为是两个文件，就可能造成误删


##显示文件编码格式

1、用VIM查看文件编码
在Vim 中可以直接查看文件编码

:set fileencoding 
即可显示文件编码格式。


2、 改写~/.vimrc 文件
如果你只是想查看其它编码格式的文件或者想解决用Vim查看文件乱码的问题，那么你可以在

~/.vimrc 文件中添加以下内容：

set encoding=utf-8 fileencodings=ucs-bom,utf-8,cp936 
这样，就可以让vim自动识别文件编码（可以自动识别UTF-8或者GBK编码的文件），其实就是依照 fileencodings提供的编码列表尝试，如果没有找到合适的编码，就用latin-1(ASCII)编码打开。

3、 用ICONV文件编码转换
我们利用iconv工具对文件的编码进行转换。

iconv 转换，iconv的命令格式如下：

iconv -f encoding -t encoding inputfile

比如将一个GBK 编码的文件转换成UTF-8编码

iconv -f GBK -t UTF-8 file1 -o file2

其中的参数的意义表示

-f From 某个编码
-t To 某个编码

-o 输出到文件

 4、 通过记事本另存为来改变文件编码；
既用windows下的记事本打开，选择另存为……，改变编码即可。

 